pragma solidity ^0.4.18;//Solidity versiyon 0.4.18

contract UserLoginRegister
{
    struct UserInfoStruct // This struct created to store all users information
    {
        string userWalletAdress;// User's ethereum wallet adress
        string userName;// Can be a person or a company
        string userPassword;// User password
        string userType;// user type means Energy Producer, Grid Operator,  Energy Trader, Energy Station
        uint256 registerDate;
    }
    
    struct AdminLogStruct // This struct log to store all users information
    {
        string userWalletAdress;// User's ethereum wallet adress
        string userName;// Can be a person or a company 
        string userType;// user type means Energy Producer, Grid Operator,  Energy Trader, Energy Station
        uint256 time;
    }
    UserInfoStruct[] public userInfoStruct;
    AdminLogStruct[] public adminLogStruct;
    
    uint public registeredUserLength=0;// to store number of registered users
    uint public adminLogLength;
    // Constructor function we are adding default users for each userType
    function UserLoginRegister() public
    {
        userInfoStruct.push(UserInfoStruct("0x1","admin","admin","Admin",1548926280));
        
        registeredUserLength=1;//In the struct there is 4 users and their datas
    }
    function Time_call() public returns (uint256){
        return now;
    }
    
    // Add new user to struct
    function userRegister(string _userWalletAdress,string _userName,string _userPassworde,string _userType)public returns (string)
    {
        uint _registerDate;
        for(uint i=0;i<registeredUserLength;i++)
        {
            if(keccak256(userInfoStruct[i].userName) ==keccak256( _userName)) // keccak256 is needed for string compare. If result is true
            {
               return "Invalid user...";
            }
        }
        _registerDate=Time_call();
       userInfoStruct.push(UserInfoStruct(_userWalletAdress,_userName,_userPassworde,_userType,_registerDate));// Push operation
       registeredUserLength++; // We must increase registeredUserLength after adding user
       return "Registration successful...";
    }
    
    // Check user informations for login web pages
    function checkUserLogin(string _userName,string _userPassworde) public returns (string ,bool,uint)
    {
        for(uint i=0;i<registeredUserLength;i++)
        {
            if(keccak256(userInfoStruct[i].userName) ==keccak256( _userName)) // keccak256 is needed for string compare. If result is true
            {
                if(keccak256(userInfoStruct[i].userPassword) == keccak256(_userPassworde)) // then compare password. If result is 
                {
                    uint256 time=Time_call();
                    adminLogStruct.push(AdminLogStruct(userInfoStruct[i].userWalletAdress,userInfoStruct[i].userName,userInfoStruct[i].userType,time));
                    adminLogLength++;
                    return (userInfoStruct[i].userType,true,i);// then return user informations.
                }
            }
        }
        return("Error",false,0);// If there is not any match, then return false.
    }
    
    function getUserLogLength(string _userName) public view returns (uint){
        if(keccak256(_userName)==keccak256("undefined")){
            return adminLogLength;
        } else {
            uint userCount=0;
            
            for(uint i=0; i<adminLogLength;i++) {
                if(keccak256(adminLogStruct[i].userName) == keccak256(_userName)){
                    userCount++;
                }
            }
            return userCount;
        }
    }
    
    function getUserLog(string _userName,uint startIndex) public view returns (string,string,string,uint256,uint){
        if(keccak256(_userName)==keccak256("undefined")){
            return (adminLogStruct[startIndex].userWalletAdress,adminLogStruct[startIndex].userName,adminLogStruct[startIndex].userType,adminLogStruct[startIndex].time,startIndex+1);
        } else {
            for(uint i=startIndex; i<adminLogLength;i++) {
                if(keccak256(adminLogStruct[i].userName) == keccak256(_userName)){
                    return (adminLogStruct[i].userWalletAdress,adminLogStruct[i].userName,adminLogStruct[i].userType,adminLogStruct[i].time,i+1);
                }
            }
        }
    }
}