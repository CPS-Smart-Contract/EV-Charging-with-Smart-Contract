pragma solidity ^0.4.18;//Solidity versiyon 0.4.18

contract UserLoginRegister
{
    struct Conditions{
        uint socketType; //1->Tip 1 (SAE 1772), 2->Tip 2 (IEC 62196), 3->Tip 4 (CHAdeMO), 4->Kombo
        uint chargeType; //1->Slow Charge, 2->Normal Charge, 3->Fast Charge
        uint chargeMode; //1->Mod1, 2->Mod2, 3->Mod3, 4->Mod4,
        bool stationState;//
        //uint countOfSameStationCondition;
    }
    
    struct UserInfoStruct // This struct created to store all users information
    {
        string userWalletAdress;// User's ethereum wallet adress
        string userName;// Can be a person or a company
        string userPassword;// User password
        uint userType;// user type means Energy Producer, Grid Operator,  Energy Trader, Energy Station
        uint256 registerDate;
        uint numStationCriteria;
        uint quality;
        mapping(uint => Conditions) conditions;
    }
    
    struct AdminLogStruct // This struct log to store all users information
    {
        string userWalletAdress;// User's ethereum wallet adress
        string userName;// Can be a person or a company 
        uint userType;// user type means Energy Producer, Grid Operator,  Energy Trader, Energy Station
        uint256 time;
    }
    
    uint public numCriteria;
    
    mapping(uint=>UserInfoStruct) public userInfoStruct;
    mapping(uint=>AdminLogStruct) public adminLogStruct; 
    uint public userLength;
    uint public adminLogLength; 
    
    function Time_call() public returns (uint256){
        return now;
    }
    
    function UserLoginRegister() public
    { 
        userInfoStruct[0]=UserInfoStruct("0x1","admin","admin",6,1548926280,0,0);
        userLength=1;//In the struct there is 4 users and their datas
    }
    
    function userRegister(string _userWalletAdress,string _userName,string _userPassword,uint _userType)public returns (string){
        uint userID = userLength;
        uint _registerDate;
        
        for(uint i=0;i<userLength;i++)
        {
            if(keccak256(userInfoStruct[i].userName) ==keccak256( _userName)) // keccak256 is needed for string compare. If result is true
            {
               return "Invalid user...";
            } 
        } 
        _registerDate=Time_call(); 
        userInfoStruct[userID]=UserInfoStruct(_userWalletAdress,_userName,_userPassword,_userType,_registerDate,0,0);
        userLength++;
        return "Registration successful...";
    }
    
    function getUserID(string _userName) public view returns(uint){
        for(uint j=0;j<userLength;j++)
        {
            if(keccak256(userInfoStruct[j].userName) == keccak256( _userName)) // keccak256 is needed for string compare. If result is true
            {
                return j;
            }
        }
    }
    
    function setUserConditions (uint userID,uint _socketType, uint _chargeType, uint _chargeMode, bool _stationState) public {
        UserInfoStruct storage u=userInfoStruct[userID];
        u.conditions[u.numStationCriteria++]=Conditions({socketType:_socketType, chargeType:_chargeType, chargeMode:_chargeMode, stationState:_stationState/*,countOfSameStationCondition:1*/});
       
    }
    
    function getUserCountOfSameStationCondition(uint userID,uint _socketType, uint _chargeType, uint _chargeMode, bool _stationState) public view returns(uint){
        UserInfoStruct storage u=userInfoStruct[userID]; 
        uint userCountOfSameStationCondition=0;
        
        for(uint i=0;i<u.numStationCriteria;i++)
        {
            if(u.conditions[i].socketType==_socketType && u.conditions[i].chargeType==_chargeType && u.conditions[i].chargeMode==_chargeMode && u.conditions[i].stationState==_stationState)
            {
                userCountOfSameStationCondition++;
            }
        }
        return (userCountOfSameStationCondition);
    }
    
    function getUserCountOfSameStationConditionIndex(uint userID,uint _socketType, uint _chargeType, uint _chargeMode, bool _stationState) public view returns(uint){
        UserInfoStruct storage u=userInfoStruct[userID]; 
        return (u.numStationCriteria-1);
    }
    
    function getSelectedUserInformation(uint userID,uint startIndex) public view returns (string,uint,uint,uint,bool,uint,uint){
        UserInfoStruct storage u=userInfoStruct[userID];
        for(uint i=startIndex;i<u.numStationCriteria;i++)
        {
            return (u.userName,u.conditions[i].socketType,u.conditions[i].chargeType,u.conditions[i].chargeMode,u.conditions[i].stationState,u.quality,i+1);
        }
    }
    
    //Match station and EV user's.
    function getMatchUsers(uint userID,uint index) public view returns (string,uint,uint,uint/*,uint*/){ 
        UserInfoStruct storage u=userInfoStruct[userID];
         
         /*
         user'in birden fazla arac� i�in d��ardan j de�i�keni al�nabilir.
         */
         
        for(uint i=index;i<userLength;i++)
        {
            for(uint j=0; j<userInfoStruct[i].numStationCriteria;j++)
            {
                if(userInfoStruct[i].userType==3 && userInfoStruct[i].conditions[j].socketType==u.conditions[0].socketType && userInfoStruct[i].conditions[j].chargeMode==u.conditions[0].chargeMode && userInfoStruct[i].conditions[j].chargeType==u.conditions[0].chargeType && userInfoStruct[i].conditions[j].stationState==u.conditions[0].stationState)
                {
                    return (userInfoStruct[i].userName, userInfoStruct[i].quality,i+1,j/*,userInfoStruct[i].conditions[j].countOfSameStationCondition*/);
                } 
            } 
        } 
    } 
    
    function isThereSameCondition(uint userID,uint _socketType,uint _chargeMode,uint _chargeType,bool _stationState) public view returns (bool,uint){ 
        UserInfoStruct storage u=userInfoStruct[userID];
        
        for(uint j=0; j<u.numStationCriteria;j++)
        {
            if(u.userType==3 && u.conditions[j].socketType==_socketType && u.conditions[j].chargeMode==_chargeMode && u.conditions[j].chargeType==_chargeType && u.conditions[j].stationState==_stationState)
            { 
                return (true,j);
            } 
        } 
        return (false,u.numStationCriteria);
    }
    
    function getMatchUsersCounts(uint userID) public view returns (uint){ 
        UserInfoStruct storage u=userInfoStruct[userID];
        uint count=0;
        for(uint i=0;i<userLength;i++)
        {
            for(uint j=0; j<userInfoStruct[i].numStationCriteria;j++)
            {
                if(userInfoStruct[i].userType==3 && userInfoStruct[i].conditions[j].socketType==u.conditions[0].socketType && userInfoStruct[i].conditions[j].chargeMode==u.conditions[0].chargeMode && userInfoStruct[i].conditions[j].chargeType==u.conditions[0].chargeType && userInfoStruct[i].conditions[j].stationState==u.conditions[0].stationState)
                {
                    count++;
                    break;
                } 
            } 
        }
        return (count);
    }
     
    function getUserCondition(uint userID,uint startIndex) public view returns (string,uint,uint,uint,bool/*,uint*/,uint)
    {
        UserInfoStruct storage u=userInfoStruct[userID];
        return (u.userName,u.conditions[startIndex].socketType,u.conditions[startIndex].chargeType,u.conditions[startIndex].chargeMode,u.conditions[startIndex].stationState/*,u.conditions[startIndex].countOfSameStationCondition*/,u.quality);
    }
    
    //Set station quality by admin
    function setStationQuality(uint userID,uint _quality) public 
    {
        UserInfoStruct storage u=userInfoStruct[userID];
        u.quality=_quality;
    }
     
    // Check user informations for login web pages
    function checkUserLogin(string _userName,string _userPassword) public returns (uint ,bool,uint)
    {
        uint logID=adminLogLength;
        for(uint i=0;i<userLength;i++)
        {
            if(keccak256(userInfoStruct[i].userName) == keccak256( _userName) && keccak256(userInfoStruct[i].userPassword) == keccak256(_userPassword)) // keccak256 is needed for string compare. If result is true
            { 
                uint256 time=Time_call();
                adminLogStruct[logID]=AdminLogStruct(userInfoStruct[i].userWalletAdress,userInfoStruct[i].userName,userInfoStruct[i].userType,time);
                //adminLogStruct.push(AdminLogStruct(userInfoStruct[i].userWalletAdress,userInfoStruct[i].userName,userInfoStruct[i].userType,time));
                adminLogLength++;
                return (userInfoStruct[i].userType,true,i);// then return user informations.
            }
        }
        return(0,false,0);// If there is not any match, then return false.
    }
   
    function getLogID(string _userName) public view returns(uint)
    {
        
        for(uint j=0;j<adminLogLength;j++)
        {
            if(keccak256(adminLogStruct[j].userName) == keccak256( _userName)) // keccak256 is needed for string compare. If result is true
            {
                return j;
            }
        }
    }
    
    function getUserLogLength(string _userName) public view returns (uint){
        if(keccak256(_userName)==keccak256("undefined")){
            return adminLogLength;
        } else {
            uint userCount=0;
            for(uint i=0; i<adminLogLength;i++) {
                if(keccak256(adminLogStruct[i].userName) == keccak256(_userName)){
                    userCount++;
                }
            }
            return userCount;
        }
    }
    
    function getUserLog(string _userName,uint startIndex) public view returns (string,string,uint,uint256,uint){
        if(keccak256(_userName)==keccak256("undefined")){
            return (adminLogStruct[startIndex].userWalletAdress,adminLogStruct[startIndex].userName,adminLogStruct[startIndex].userType,adminLogStruct[startIndex].time,startIndex+1);
        } else {
            for(uint i=startIndex; i<adminLogLength;i++) {
                if(keccak256(adminLogStruct[i].userName) == keccak256(_userName)){
                    return (adminLogStruct[i].userWalletAdress,adminLogStruct[i].userName,adminLogStruct[i].userType,adminLogStruct[i].time,i+1);
                }
            }
        }
    }
}