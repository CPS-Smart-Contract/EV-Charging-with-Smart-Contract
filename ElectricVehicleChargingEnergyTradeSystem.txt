pragma solidity ^0.4.18;//Solidity versiyon 0.4.18

contract ElectricVehicleChargingEnergyTradeSystem
{
    struct ProductInfoStruct // This struct created to store all offers from owners
    {
        string ownerName;// Can be a person or a company
        uint energyPrice;
        uint ownerType;// Owner type 0-> Energy Producer, 1->Grid Operator, 2-> Energy Trader, 3-> Station
        uint256 transactionTime;
        bool state;
        uint stationDistance; //ev user's distance from station
        uint stationExpectedWaitingTime; 
        uint stationConditionIndex;
    }
    
    struct MoneyExchangeInfoStruct // This struct created to store all users information
    {
        string fromUserWalletAdress;// User's ethereum wallet adress
        string fromUserName;// User's ethereum wallet adress
        string toUserWalletAdress;// User's ethereum wallet adress
        string toUserName;// User's ethereum wallet adress
        uint transactionCost;
        uint256 transactionTime;
    }
    
    ProductInfoStruct[] public productInfoStruct;
    MoneyExchangeInfoStruct[] public moneyExchangeInfoStruct;
    uint public lengthOfMoneyExchangeInfoStruct;
    uint public lengthOfProductInfoStruct;// To store lenght of Product Info Struct
    
    //Constructor Funtion add some default owners
    function ElectricVehicleChargingEnergyTradeSystem() public
    {
        lengthOfMoneyExchangeInfoStruct=0;
        lengthOfProductInfoStruct=0;
    }
    
    function Time_call() returns (uint256){
        return now;
    }
      
    // This function to add new offers to productInfoStruct. 
    function addOffer(string _ownerName, uint _energyPrice,uint _profitRate, uint _ownerType, bool _state, uint _stationDistance, uint _stationExpectedWaitingTime,uint _stationConditionIndex  ) public
    {  
        uint _transactionTime=Time_call();
        _energyPrice=_energyPrice+_energyPrice*_profitRate/100;// Energy price is equal to energyPrice+energyPrice*profitRate/100 
        
        productInfoStruct.push(ProductInfoStruct(_ownerName,_energyPrice,_ownerType,_transactionTime,_state,_stationDistance, _stationExpectedWaitingTime,_stationConditionIndex));
        lengthOfProductInfoStruct++;// We must increment lengthOfProductInfoStruct;
    } 

    // This function returns how many an owner(For Example: Energy producer) is stored in productInfoStruct
    function getAnOwnerLength(uint _ownerType) public constant returns (uint)
    {
        uint lengthOfTheOwnerType=0;
        for(uint i=0;i<lengthOfProductInfoStruct;i++)
        {
            if(productInfoStruct[i].ownerType ==_ownerType) // When find the wanted owner type increment 1
            {
               lengthOfTheOwnerType++;
            }
        }  
        return lengthOfTheOwnerType;// Return the lenght of the wanted owner type
    }
    
    function getCurrentUserTransactionLength(string _ownerName,uint _ownerType) public constant returns (uint)
    {
       uint lengthOfTheOwnerNameTransactions=0;
        for(uint i=0;i<lengthOfProductInfoStruct;i++)
        {
            if(productInfoStruct[i].ownerType ==_ownerType && keccak256(productInfoStruct[i].ownerName) == keccak256(_ownerName)) // When find the wanted owner type increment 1
            {
                lengthOfTheOwnerNameTransactions++;
            }
        }  
        return lengthOfTheOwnerNameTransactions;// Return the lenght of the wanted owner name
    }
    
    function getCurrentUserAllTransactions(string _ownerName,uint startIndex,uint wantedOwnerType) public constant returns (string, uint,uint,uint256,bool,uint,uint)
    {
        for(uint i=startIndex;i<lengthOfProductInfoStruct;i++)// Start the search starting index
        {
            if(productInfoStruct[i].ownerType ==wantedOwnerType && keccak256(productInfoStruct[i].ownerName) == keccak256(_ownerName))// When find wanted owner type return datas and where searc stop
            {
                return (productInfoStruct[i].ownerName,productInfoStruct[i].energyPrice,i+1,productInfoStruct[i].transactionTime,productInfoStruct[i].state, productInfoStruct[i].stationDistance, productInfoStruct[i].stationExpectedWaitingTime );
            }
        }
    }
    
    /* This function desing for web services. Each web pages need to list related owners and the owners offers. 
    Each request returs one owner and its offer. 
    Related web page goint to send request according to return value of getAnOwnerLength funtion.
    This function need starting index and owner type.
    Function needs the starting index to know where it start search. 
    Returns owner name, its offer and where searching stop */
    function wantedValueofProductInfoStruct(uint startIndex,uint wantedOwnerType) public constant returns (string, uint,uint,uint256,bool)
    {
        for(uint i=startIndex;i<lengthOfProductInfoStruct;i++)// Start the search starting index
        {
            if(productInfoStruct[i].ownerType ==wantedOwnerType)// When find wanted owner type return datas and where searc stop
            {
                return (productInfoStruct[i].ownerName,productInfoStruct[i].energyPrice,i+1,productInfoStruct[i].transactionTime,productInfoStruct[i].state);
            }
        }
    }
    
    // This function is to find best offer(minumum offer) in an owner type
    function getMinEnergyPriceAccordingToOwnerType(uint _ownerType) public constant returns (string, uint,uint)
    {
        uint minEnergyPrice=~uint256(0);// Initialization of minumum energy price as max value of uint.
        string _ownerName;
        uint index;
        for(uint i=0;i<lengthOfProductInfoStruct;i++)// Browse all datas
        {
            if(productInfoStruct[i].ownerType ==_ownerType && minEnergyPrice>productInfoStruct[i].energyPrice &&productInfoStruct[i].state==true)// Is it wanted owner type.
            {
                minEnergyPrice=productInfoStruct[i].energyPrice;// Then new min value is updated,
                _ownerName=productInfoStruct[i].ownerName;// and its owner is updated
                index=i;
            }
        }
        return (_ownerName,minEnergyPrice,index);
    }
    
    function setOfferState (uint indexOfOffer,bool _state) public{
        if(productInfoStruct[indexOfOffer].state!=_state)
            productInfoStruct[indexOfOffer].state=_state;
    }
  
    function addMoneyExchangeTransaction(string _fromUserWalletAdress,string _fromUserName,string _toUserWalletAdress,string _toUserName,uint _transactionCost) public
    {
        uint _transactionTime=Time_call();
        moneyExchangeInfoStruct.push(MoneyExchangeInfoStruct(_fromUserWalletAdress,_fromUserName,_toUserWalletAdress,_toUserName,_transactionCost,_transactionTime));
        lengthOfMoneyExchangeInfoStruct++;// We must increment lengthOfProductInfoStruct;
    } 
    
    function getMatchOffer(string _stationUserName,uint _stationConditionIndex,uint index) public view returns (uint,uint,uint,uint,bool){ 
        
        //uint length=getCurrentUserTransactionLength(_stationUserName,3);
        for(uint i=index;i<lengthOfProductInfoStruct;i++)// Browse all datas
        {
            if( productInfoStruct[i].stationConditionIndex ==_stationConditionIndex && productInfoStruct[i].state==true && keccak256(productInfoStruct[i].ownerName) ==keccak256(_stationUserName))
            {
                if(i!=lengthOfProductInfoStruct){
                    return (productInfoStruct[i].energyPrice,productInfoStruct[i].stationDistance,productInfoStruct[i].stationExpectedWaitingTime,i+1,true);
                }else{
                    return (0,0,0,0,false);

                }
            }
        }
        return (0,0,0,0,false);

    } 
    /*
    function getMatchOfferCount1(string _stationUserName,uint _stationConditionIndex) public view returns (uint){ 
        uint length=getCurrentUserTransactionLength(_stationUserName,3);
        uint count=0;
        for(uint i=0;i<length;i++)// Browse all datas
        {
            if( productInfoStruct[i].stationConditionIndex ==_stationConditionIndex && productInfoStruct[i].state==true && keccak256(productInfoStruct[i].ownerName) ==keccak256(_stationUserName))
            {
                count++;
            }
        }
        return (count);
    }*/
    
}